package N1BasicsProgJava.N3DataType;

public class DataTypes {
    public static void main(String[] args) {
        // boolean хранит true или false.
        boolean isActive = false;
        boolean isAlive = true;

        // byte хранит целое число от -128 до 127 и занимает 1 байт.
        byte a = 3;
        byte b = 8;

        // short хранит целое число от -32768 до 32767 и занимает 2 байта.
        short c = 4;
        short d = 9;

        // int хранит целое число от -2147483648 до 2147483647 и занимает 4 байта.
        int f = 5;
        int g = 10;

        // long хранит целое число от -9 223 372 036 854 775 808 до 9 223 372 036 854
        // 775 807 и занимает 8 байт.
        long h = 6;
        long i = 11;
        long num = 2147483649L; // число является допустимым для типа long, но выходит за
                                // пределы int, поэтому в конце надо ставить суффикс l или L.
        long num1 = 249;
        System.out.println(num); // 2147483649
        System.out.println(num1); // 249

        // double хранит число с плавующей точкой от +-4.9*10^-324 до
        // +-1.7976931348623157*10^308 и занимает 8 байт.
        double j = 7.3;
        double k = 11.378;

        // float хранит число с плавующей точкой от -3.4*10^38 до 3.4*10^38 и занимает 4
        // байта.
        float l = 8.5456F;
        float m = 2.7F;
        System.out.println(l); // напечатает 8.5456
        System.out.println(m); // напечатает 2.7
        float fl = 30.6f;
        double dou = 30.6;
        System.out.println(fl); //И хотя обе эти переменные будут иметь одинаковые
        System.out.println(dou); //значения, но эти значение занимает разное количество памяти.

        // Как правило, значения задаются в десятичной системе счисления, одако мы можем
        // применять и другие системы:
        int num111 = 0x6F;  // 16-ичная система, число 111
        int num8 = 010;     // 8-ичная система, число 8
        int num13 = 0b1101; // 2-ичная система, число 13
        // Для задания шеснадцатеричного значения после символов 0x указывается число в
        // шеснадцатеричном формате. Таким же образом восьмеричное значение указывается
        // после символа 0, а двоичное после 0b.
        System.out.println(num111);
        System.out.println(num8);
        System.out.println(num13);

        // Также целые числа поддерживают разделение разрядов числа с помощью знака
        // подчеркивания.
        int x = 123_456;
        int y = 234_567__789;
        System.out.println(x);// 123456
        System.out.println(y);// 234567789


        // В качестве значения переменная символьного типа получает одиночный символ,
        // заключенный в одинарные кавычки: char ch='e';. Кроме того, переменной
        // символьного типа также можно присвоить целочисленное значение от 0 до 65535.
        // В этом случае переменная опять же будет хранить символ, а целочисленное
        // значение будет указывать на номер символа в таблице символов Unicode
        // (UTF-16). Например:
        char ch=102;            // символ 'f'
        System.out.println(ch);
        //Еще одной формой задания символьных переменных является шестнадцатеричная форма: 
        //переменная получает значение в шестнадцатеричной форме, которое следует после 
        //символов "\ u". Например, char ch='\u0066'; опять же будет хранить символ 'f'.
        // Символьные переменные не стоит путать со строковыми, 'a' не идентично "a". 
        //Строковые переменные представляют объект String, который в отличие от char или 
        //int не является примитивным типом в Java:
        String hello = "Hello...";
        System.out.println(hello);  


        //Кроме собственно символов, которые представляют буквы, цифры, знаки препинания, 
        //прочие символы, есть специальные наборы символов, которые называют управляющими 
        //последовательностями. Например, самая популярная последовательность - "\n". Она 
        //выполняет перенос на следующую строку. Например:
        String text = "Hello \nworld";
        System.out.println(text);


        //Начиная с версии 15 Java поддерживает тестовые блоки (text blocks) - многострочный 
        //текст,облеченный в тройные кавычки. Рассмотрим, в чем их практическая польза. 
        //Например, выведем большой многострочный текст:
        String text1 = "Вот мысль, которой весь я предан,\n"+
                "Итог всего, что ум скопил.\n"+
                "Лишь тот, кем бой за жизнь изведан,\n"+
                "Жизнь и свободу заслужил.";
        System.out.println(text1);
        System.out.println();

        
        //Текстовые блоки, которые появились в JDK15, позволяют упростить написание многострочного текста:
        String text2 = """
            Вот мысль, которой весь я предан,
            Итог всего, что ум скопил.
            Лишь тот, кем бой за жизнь изведан,
            Жизнь и свободу заслужил.
            """;
        System.out.println(text2);
    }
}